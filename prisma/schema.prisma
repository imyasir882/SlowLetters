// Prisma Database Configuration
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(cuid())
  displayName  String
  username     String   @unique
  passwordHash String   @map("password_hash")
  inviteCode   String?  @unique @map("invite_code")
  pairedWith   String?  @map("paired_with")
  createdAt    DateTime @default(now()) @map("created_at")

  // Relations
  pairsAsUserA Pair[] @relation("UserA")
  pairsAsUserB Pair[] @relation("UserB")
  letters      Letter[]

  @@map("users")
}

model Pair {
  id           String   @id @default(cuid())
  userAId      String   @map("user_a_id")
  userBId      String   @map("user_b_id")
  delaySeconds Int      @map("delay_seconds") @default(86400) // 24 hours
  turnUserId   String   @map("turn_user_id")
  lastSentAt   DateTime? @map("last_sent_at")
  createdAt    DateTime @default(now()) @map("created_at")

  // Relations
  userA   User     @relation("UserA", fields: [userAId], references: [id], onDelete: Cascade)
  userB   User     @relation("UserB", fields: [userBId], references: [id], onDelete: Cascade)
  letters Letter[]

  @@map("pairs")
}

model Letter {
  id         String   @id @default(cuid())
  pairId     String   @map("pair_id")
  authorId   String   @map("author_id")
  bodyText   String   @map("body_text")
  isFavorite Boolean  @default(false) @map("is_favorite")
  createdAt  DateTime @default(now()) @map("created_at")

  // Relations
  pair   Pair @relation(fields: [pairId], references: [id], onDelete: Cascade)
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("letters")
}
